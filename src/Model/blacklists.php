<?php
/*
 * Copyright (C) 2004-2024 Soner Tari
 *
 * This file is part of UTMFW.
 *
 * UTMFW is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * UTMFW is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with UTMFW.  If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 * Search blacklists used by E2guardian.
 */

require_once($MODEL_PATH.'/e2guardian.php');

class Blacklists extends E2guardian
{
	public $Name= 'blacklists';
	
	public $LogFile= UTMFWDIR.'/out/search.out';
	
	private $blacklistsPath= '';

	function __construct()
	{
		parent::__construct();
		
		$this->blacklistsPath= $this->confDir.'lists/blacklists/';
		
		$this->Commands= array_merge(
			$this->Commands,
			array(
				'SearchSite'=>	array(
					'argv'	=>	array(REGEXP),
					'desc'	=>	_('Search site'),
					),
				)
			);
	}

	/**
	 * Searches a given site/url in blacklists.
	 *
	 * Skips *.processed files generated by E2guardian at first startup.
	 *
	 * @param string $site Search string
	 * @return mixed File path of search results or FALSE on failure
	 */
	function SearchSite($site)
	{
		$dir= dirname($this->LogFile);
		if (!file_exists($dir)) {
			exec('/bin/mkdir -p '.$dir);
		}

		// Do not list results from domain/url.processed files,
		// *.processed files are generated by e2guardian, and skip non-list files too
		$site= escapeshellarg($site);
		$cmd= "/usr/bin/find $this->blacklistsPath \! -name \"*.processed\" \! -name \"COPYRIGHT\" \! -name \"global_usage\" \! -name \"cats.php\" -exec /usr/bin/grep -HI -E $site {} \; > $this->LogFile 2>&1";
		exec($cmd, $output, $retval);

		return Output($retval <= 1 ? $this->LogFile : FALSE);
	}

	/**
	 * Search result parser.
	 *
	 * This method does what all other ParseLogLine() methods do on log files,
	 * except that this works on search results. Function name and signature
	 * should be the same, because blacklists search results are displayed by
	 * other logs methods.
	 */
	function ParseLogLine($logline, &$cols)
	{
		$re= "|^$this->blacklistsPath(\S+)/(\S+):(.*)$|";
		if (preg_match($re, $logline, $match)) {
			$catArray= explode('/', $match[1], 2);
			$cat= $catArray[0];
			if (isset($catArray[1])) {
				// in case the dir has sub-subdirs
				$cat.= ' '.$catArray[1];
			}

			$cols['Category']= ucwords($cat.' '.$match[2]);
			$cols['Site']= $match[3];
			return TRUE;
		}
		return FALSE;
	}
}
?>
